
## SQL and Telegram Bot Development Guide

### **Section 1: SQL (Structured Query Language)**

#### **1.1 Basics of SQL**

1. **What is SQL?**

   - A language for managing and manipulating relational databases.
   - Common databases: MySQL, PostgreSQL, SQLite, SQL Server, Oracle.

2. **Core Concepts**

   - **Database**: A collection of data organized for easy access and management.
   - **Table**: Data is stored in rows and columns.
   - **Row/Record**: A single entry in a table.
   - **Column/Field**: A category of data in a table.

3. **CRUD Operations**

   - **Create**: Add data.
     ```sql
     CREATE TABLE users (
         id INT PRIMARY KEY,
         name VARCHAR(100),
         age INT
     );

     INSERT INTO users (id, name, age) VALUES (1, 'John Doe', 25);
     ```
   - **Read**: Retrieve data.
     ```sql
     SELECT * FROM users;
     ```
   - **Update**: Modify existing data.
     ```sql
     UPDATE users SET age = 26 WHERE id = 1;
     ```
   - **Delete**: Remove data.
     ```sql
     DELETE FROM users WHERE id = 1;
     ```

#### **1.2 Intermediate SQL**

1. **Joins**

   - Combine rows from two or more tables based on a related column.
   - **INNER JOIN**: Matches rows in both tables.
     ```sql
     SELECT orders.id, users.name
     FROM orders
     INNER JOIN users ON orders.user_id = users.id;
     ```
   - **LEFT JOIN**: Includes all rows from the left table.
     ```sql
     SELECT users.name, orders.amount
     FROM users
     LEFT JOIN orders ON users.id = orders.user_id;
     ```

2. **Aggregations**

   - Perform calculations on multiple rows.
     ```sql
     SELECT COUNT(*) AS total_users FROM users;
     SELECT AVG(age) AS avg_age FROM users;
     SELECT MAX(age) AS max_age FROM users;
     ```
   - Use `GROUP BY` for grouped calculations.
     ```sql
     SELECT age, COUNT(*) AS user_count
     FROM users
     GROUP BY age;
     ```

3. **Subqueries**

   - Nested queries for complex data extraction.
     ```sql
     SELECT name
     FROM users
     WHERE id = (SELECT user_id FROM orders WHERE amount = 100);
     ```

4. **Indexes**

   - Speeds up query execution.
     ```sql
     CREATE INDEX idx_users_name ON users(name);
     ```

5. **Normalization**

   - Efficient database design.
     - **1NF**: Eliminate duplicate columns.
     - **2NF**: Ensure all non-key attributes depend on the primary key.
     - **3NF**: Eliminate transitive dependencies.

#### **1.3 Advanced SQL**

1. **Stored Procedures**

   - Reusable SQL code blocks.
     ```sql
     CREATE PROCEDURE GetUserById (IN userId INT)
     BEGIN
         SELECT * FROM users WHERE id = userId;
     END;
     ```

2. **Triggers**

   - Automate tasks.
     ```sql
     CREATE TRIGGER user_insert AFTER INSERT ON users
     FOR EACH ROW
     BEGIN
         INSERT INTO logs (action) VALUES ('User added: ' || NEW.name);
     END;
     ```

3. **Performance Optimization**

   - Analyze slow queries with `EXPLAIN`.
     ```sql
     EXPLAIN SELECT * FROM users WHERE age > 20;
     ```
   - Use proper indexes and avoid `SELECT *`.

4. **SQL with Python**

   - Example using SQLite in Python:
     ```python
     import sqlite3
     conn = sqlite3.connect('example.db')
     cursor = conn.cursor()

     cursor.execute('SELECT * FROM users')
     rows = cursor.fetchall()
     print(rows)

     conn.close()
     ```

#### **1.4 Exercises**

1. Create a database for a library system.
   - Tables: Books, Authors, Borrowers.
   - Example query: List all books borrowed by a specific user.
2. Optimize a query for retrieving the top 5 oldest users.
3. Write a stored procedure to calculate the total sales for a given date range.

---

### **Section 2: Telegram Bot Development**

#### **2.1 Basics of Telegram Bot Development**

1. **Setting Up a Bot**

   - Talk to `@BotFather` on Telegram.
   - Use `/newbot` to create a bot and get a token.

2. **Libraries**

   - Install `python-telegram-bot`.
     ```bash
     pip install python-telegram-bot
     ```

3. **Basic Bot Example**

   ```python
   from telegram import Update
   from telegram.ext import ApplicationBuilder, CommandHandler

   async def start(update: Update, context):
       await update.message.reply_text('Assalomu alaykum! I am your bot.')

   app = ApplicationBuilder().token('YOUR_BOT_TOKEN').build()
   app.add_handler(CommandHandler('start', start))

   app.run_polling()
   ```

#### **2.2 Intermediate Bot Features**

1. **Handling Text Messages**

   ```python
   from telegram.ext import MessageHandler, filters

   async def handle_message(update: Update, context):
       await update.message.reply_text(f'You said: {update.message.text}')

   app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
   ```

2. **Inline and Reply Keyboards**

   ```python
   from telegram import InlineKeyboardButton, InlineKeyboardMarkup

   async def show_menu(update: Update, context):
       keyboard = [[InlineKeyboardButton('Option 1', callback_data='1')],
                  [InlineKeyboardButton('Option 2', callback_data='2')]]
       reply_markup = InlineKeyboardMarkup(keyboard)
       await update.message.reply_text('Choose an option:', reply_markup=reply_markup)
   ```

3. **Webhook Deployment**

   - Host the bot on a server.
   - Example: Using Flask with Python.
     ```python
     from flask import Flask, request
     app = Flask(__name__)

     @app.route('/webhook', methods=['POST'])
     def webhook():
         update = request.json
         # Process update
         return 'OK'

     app.run(port=8443)
     ```

#### **2.3 Advanced Bot Features**

1. **Database Integration**

   ```python
   import sqlite3

   def init_db():
       conn = sqlite3.connect('bot.db')
       cursor = conn.cursor()
       cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER, name TEXT)')
       conn.commit()
       conn.close()

   async def save_user(update: Update, context):
       user_id = update.message.from_user.id
       user_name = update.message.from_user.first_name
       conn = sqlite3.connect('bot.db')
       cursor = conn.cursor()
       cursor.execute('INSERT INTO users VALUES (?, ?)', (user_id, user_name))
       conn.commit()
       conn.close()
       await update.message.reply_text('User saved!')

   init_db()
   ```

2. **Third-Party API Integration**

   ```python
   import requests

   async def get_weather(update: Update, context):
       city = update.message.text.split(' ')[1]
       response = requests.get(f'http://api.weatherapi.com/v1/current.json?key=YOUR_API_KEY&q={city}')
       data = response.json()
       weather = data['current']['condition']['text']
       await update.message.reply_text(f'The weather in {city} is {weather}')
   ```

3. **Task Scheduling**

   ```python
   from apscheduler.schedulers.background import BackgroundScheduler

   scheduler = BackgroundScheduler()

   def send_reminders():
       # Logic to send messages
       pass

   scheduler.add_job(send_reminders, 'interval', minutes=60)
   scheduler.start()
   ```

#### **2.4 Exercises**

1. Create a bot that stores user feedback in a database.
2. Build a reminder bot that sends daily ayah or hadith.
3. Integrate a currency converter API with the bot.
