
Comprehensive Python Fundamentals Guide
========================================

1. Python Overview and Installation
------------------------------------
Python is a versatile, high-level programming language popular in fields like AI, web development, data science, and more. 

- **Installation Steps**:
    - Download Python from https://www.python.org/downloads/
    - Setup environment variables if needed.
    - IDEs: Choose from Visual Studio Code, PyCharm, Jupyter Notebook.

- **First Program**:
    ```python
    print("Hello, World!")
    ```

2. Variables and Data Types
----------------------------
Python uses dynamic typing, allowing variables to hold data of any type.

- **Defining Variables**:
    ```python
    age = 19       # Integer
    height = 1.75  # Float
    name = "John"  # String
    is_student = True  # Boolean
    ```
- **Type Conversion**:
    ```python
    # Convert float to string
    height_str = str(height)
    ```
- **Detailed Exercise**:
    Write a program that prompts users to enter name, age, and if they are a student. Display a message using these inputs.

3. Operators
------------
Python supports arithmetic, comparison, logical, assignment, and bitwise operators.

- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `%`, `**`, `//`
- **Comparison Operators**: `==`, `!=`, `>`, `<`, `>=`, `<=`
- **Logical Operators**: `and`, `or`, `not`
- **Assignment Operators**: `+=`, `-=`, `*=`, `/=`, etc.
- **Bitwise Operators**: `&`, `|`, `^`, `~`, `<<`, `>>`

**Complex Exercise**: Create a calculator program that uses different operators.

4. Control Flow
---------------
Control flow structures like `if`, `elif`, and `else` allow for conditional execution.

- **Nested Conditions**:
    ```python
    num = int(input("Enter a number: "))
    if num > 0:
        if num > 100:
            print("Big positive number")
        else:
            print("Small positive number")
    elif num < 0:
        print("Negative number")
    else:
        print("Zero")
    ```

- **Exercise**: Write a program that evaluates if a user-input number is positive, negative, or zero.

5. Loops
--------
Loops (`for`, `while`) enable repetitive tasks.

- **For Loop**:
    ```python
    for i in range(1, 6):
        print(i)  # Prints 1 to 5
    ```
- **While Loop**:
    ```python
    count = 0
    while count < 5:
        print(count)
        count += 1
    ```
- **Nested Loops**: Useful for multidimensional data.

**Exercise**: Write a program to print a multiplication table for a number.

6. Functions
------------
Functions are blocks of code designed to perform a specific task.

- **Function Definition and Call**:
    ```python
    def greet(name):
        return f"Hello, {name}!"
    ```
- **Parameters and Arguments**:
    - Functions can accept parameters and return values.
- **Default Parameters**:
    ```python
    def greet(name="Guest"):
        return f"Hello, {name}!"
    ```

**Exercise**: Create a function `factorial` that calculates the factorial of a number.

7. Data Collections
-------------------
Data structures like lists, tuples, dictionaries, and sets allow efficient data management.

- **Lists**:
    ```python
    fruits = ["apple", "banana", "cherry"]
    fruits.append("orange")
    ```
- **Tuples**:
    ```python
    coordinates = (10, 20)
    ```
- **Dictionaries**:
    ```python
    student_scores = {"Alice": 85, "Bob": 72}
    ```
- **Sets**:
    ```python
    unique_numbers = {1, 2, 3}
    ```

**Exercise**: Write a program that uses dictionaries to store product prices and calculates the total price.

8. File Handling
----------------
File handling allows reading from and writing to files.

- **Basic Operations**:
    ```python
    file = open("sample.txt", "r")
    content = file.read()
    file.close()
    ```

- **With Statement**: Ensures file closure.
    ```python
    with open("sample.txt", "r") as file:
        content = file.read()
    ```

**Exercise**: Create a program that writes user-input to a file and then reads and displays it.

9. Error Handling
------------------
Python uses `try` and `except` for error handling.

- **Syntax**:
    ```python
    try:
        result = 10 / 0
    except ZeroDivisionError as e:
        print("Error:", e)
    ```

**Exercise**: Create a program that divides two numbers, handling division by zero errors.

10. Project Ideas for Practice
-------------------------------
- **Simple Calculator**: Use functions to perform basic math operations.
- **To-Do List**: Store tasks and allow users to add, view, and delete tasks.
- **BMI Calculator**: Prompt user for height and weight, calculate BMI.

Advanced Project Idea:
- **Basic Student Database**: Use dictionaries to store student information (name, age, scores). Allow viewing, adding, and updating student data.

